#+TITLE: Javascript Generation with Servant
#+AUTHOR: Trevor Riles
#+DATE: <2017-07-19 Wed>
#+LANGUAGE: en

* Haskell

- Type Safe
- Elegant
- Safe Refactoring

* Lets Build a Habit Tracker

Requirements:
- Track a collection of habits.
- Allow a user to log a Yes, No, or Skip for habit for any given day.
- Create a simple web UI to assist in entering results.

* Haskell Data Types

#+BEGIN_SRC haskell
data Habit = Habit {
  habitId :: Integer,
  habitName :: String,
  habitMotivation :: Maybe String,
  habitChain :: Maybe [LogItem]
} deriving (Generic, Show)

instance ToJSON Habit
instance FromJSON Habit
#+END_SRC

* Servant
Servant is a webframe work where you define your API in the type system.

#+NAME: ApiType.hs
#+BEGIN_SRC haskell
-- Our Habit Api
type HabitApi = "habits" :> ReqBody '[JSON] Habit :> Post '[JSON] [Habit]
           :<|> "habits" :> Get '[JSON] [Habit]

-- Our Habit Api + Static file serving
type HabitApi' = HabitApi
            :<|> Raw -- Used to serve static files.
#+END_SRC

* Servant: Persistence (sort of)

Some helper functions to add and remove habits server side:
#+BEGIN_SRC haskell
-- Use a TVar to store our habbits in memory.
newHabitList :: IO (TVar [Habit])
newHabitList = newTVarIO []

addHabit :: MonadIO m => TVar [Habit] -> Habit -> m [Habit]
addHabit habitList habit = liftIO . atomically $ do
  oldList <- readTVar habitList
  let newList = [habit] ++ oldList
  writeTVar habitList newList
  return newList

getHabitList :: MonadIO m => TVar [Habit] -> m [Habit]
getHabitList habitList = liftIO $ readTVarIO habitList
#+END_SRC

* Servant: Serving the API

#+NAME: Server.hs
#+BEGIN_SRC haskell
-- A little bit of boilerplate here.
habitApi :: Proxy HabitApi
habitApi = Proxy

habitApi' :: Proxy HabitApi'
habitApi' = Proxy

server :: TVar [Habit] -> Server HabitApi
server habitList = addHabit habitList
              :<|> getHabitList habitList

server' :: TVar [Habit] -> Server HabitApi'
server' habitList = server habitList
               :<|> serveDirectory www

runServer :: TVar [Habit] -> Int -> IO ()
runServer var port = run port (serve habitApi' $ server' var)
#+END_SRC

* ServantJS: Generating a JS Client
Inside the main function we generate our javascript client:
#+BEGIN_SRC haskell
writeJSForAPI habitApi vanillaJS ("www" </> "api.js")
#+END_SRC

* ServantJS: The Generated JS
#+BEGIN_SRC javascript
var postHabits = function(body, onSuccess, onError) {
  var xhr = new XMLHttpRequest();
  xhr.open('POST', '/habits', true);
  xhr.setRequestHeader('Accept', 'application/json');
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.onreadystatechange = function () {
    var res = null;
    if (xhr.readyState === 4) {
      if (xhr.status === 204 || xhr.status === 205) {
        onSuccess();
      } else if (xhr.status >= 200 && xhr.status < 300) {
        try { res = JSON.parse(xhr.responseText); } catch (e) { onError(e); }
        if (res) onSuccess(res);
      } else {
        try { res = JSON.parse(xhr.responseText); } catch (e) { onError(e); }
        if (res) onError(res);
      }
    }
  };
  xhr.send(JSON.stringify(body));
};

var getHabits = function(onSuccess, onError) {
  var xhr = new XMLHttpRequest();
  xhr.open('GET', '/habits', true);
  xhr.setRequestHeader('Accept', 'application/json');
  xhr.onreadystatechange = function () {
    var res = null;
    if (xhr.readyState === 4) {
      if (xhr.status === 204 || xhr.status === 205) {
        onSuccess();
      } else if (xhr.status >= 200 && xhr.status < 300) {
        try { res = JSON.parse(xhr.responseText); } catch (e) { onError(e); }
        if (res) onSuccess(res);
      } else {
        try { res = JSON.parse(xhr.responseText); } catch (e) { onError(e); }
        if (res) onError(res);
      }
    }
  };
  xhr.send(null);
};

#+END_SRC

* Lets try it out!

#+NAME: index.html
#+BEGIN_SRC html
<html>
    <head>
        <title>Hello ServantJS</title>
    </head>
    <body>
        <h1>Hello ServantJS</h1>
        <ul id="habits"></ul>

        <script src="api.js" type="text/javascript"></script>
        <script type="text/javascript">
            window.addEventListener('load', function() {
            // we get the current value stored by the server when the page is loaded
                getHabits(updateHabits, alert);
            });

            function updateHabits(response) {
                document.getElementById('habits').innerHTML = "";
                response.forEach(addHabitNameToList);
            }

            function addHabitNameToList(habit) {
                var list = document.getElementById('habits');
                var entry = document.createElement('li');
                entry.appendChild(document.createTextNode(habit["habitName"]));
                list.appendChild(entry);
            }

            function addHabit(name) {
                postHabits({"habitName": name, "habitId": 999, "habitChain": []}, updateHabits, alert)
            }
        </script>
    </body>
</html>
#+END_SRC
